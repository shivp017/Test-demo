{"version":3,"file":"ngx-linkifyjs.umd.js","sources":["../../tmp/module/service/ngx-linkifyjs.service.ts","../../tmp/module/pipes/ngx-linkifyjs.pipe.ts","../../tmp/module/enum/linktype.enum.ts","../../tmp/module/ngx-linkifyjs.module.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\n// @ts-ignore\nimport * as linkify from 'linkifyjs';\nimport {Link} from '../..';\nimport {NgxLinkifyOptions} from '../interfaces/ngx-linkifyjs.interface';\n\n@Injectable()\nexport class NgxLinkifyjsService {\n  constructor() {\n  }\n\n  /**\n   * Convert the passed text as a string to an appropriate url\n   *\n   * @param text - the string to convert\n   * @param options - options to pass it to the linkifyjs library\n   */\n  linkify(text: string, options?: NgxLinkifyOptions): string {\n    // @ts-ignore\n    return text.linkify(options);\n  }\n\n  /**\n   * Find any links in a given text as a string\n   *\n   * @param text - the string to find some links\n   */\n  find(text: string): Array<Link> {\n    return linkify.find(text);\n  }\n\n  /**\n   * Test if a given value or array of values are links\n   *\n   * @param value - the value to test\n   */\n  test(value: string | string[]): boolean {\n    if (typeof value === 'string') {\n      return linkify.test(value);\n    }\n    return linkify.test(...value);\n  }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n// @ts-ignore\nimport linkifyStr from 'linkifyjs/string';\nimport {NgxLinkifyOptions} from '../..';\n\n@Pipe({\n  name: 'linkify'\n})\nexport class NgxLinkifyjsPipe implements PipeTransform {\n\n  transform(value: string, options?: NgxLinkifyOptions): string {\n    return value ? linkifyStr(value, options) : value;\n  }\n\n}\n","export enum LinkType {\n  URL = 'url',\n  HASHTAG = 'hashtag',\n  MENTION = 'mention',\n  EMAIL = 'email',\n}\n","import {CommonModule} from '@angular/common';\nimport {Inject, InjectionToken, ModuleWithProviders, NgModule} from '@angular/core';\n// @ts-ignore\nimport * as linkify from 'linkifyjs';\n// @ts-ignore\nimport hashtag from 'linkifyjs/plugins/hashtag';\n// @ts-ignore\nimport mention from 'linkifyjs/plugins/mention';\n\nimport {NgxLinkifyjsService} from './service/ngx-linkifyjs.service';\nimport {NgxLinkifyjsPipe} from './pipes/ngx-linkifyjs.pipe';\n\n// Export module's public API\nexport {Link} from './interfaces/ngx-linkifyjs.interface';\nimport {NgxLinkifyjsConfig} from './interfaces/ngx-linkifyjs.interface';\n\nexport {LinkType} from './enum/linktype.enum';\nexport {NgxLinkifyOptions} from './interfaces/ngx-linkifyjs.interface';\nexport {NgxLinkifyjsPipe} from './pipes/ngx-linkifyjs.pipe';\nexport {NgxLinkifyjsService} from './service/ngx-linkifyjs.service';\n\nexport const NgxLinkifyjsConfigToken = new InjectionToken<NgxLinkifyjsConfig>('NgxLinkifyjsConfig');\nexport const DEFAULT_CONFIG: NgxLinkifyjsConfig = {enableHash: true, enableMention: true};\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  exports: [NgxLinkifyjsPipe],\n  declarations: [NgxLinkifyjsPipe]\n})\nexport class NgxLinkifyjsModule {\n\n  static forRoot(config: NgxLinkifyjsConfig = DEFAULT_CONFIG): ModuleWithProviders {\n    return {\n      ngModule: NgxLinkifyjsModule,\n      providers:\n        [\n          NgxLinkifyjsService,\n          {\n            provide: NgxLinkifyjsConfigToken,\n            useValue: config\n          },\n        ]\n    };\n  }\n\n  constructor(@Inject(NgxLinkifyjsConfigToken)\n              public config: NgxLinkifyjsConfig) {\n    if (config.enableHash) {\n      hashtag(linkify);\n    }\n\n    if (config.enableMention) {\n      mention(linkify);\n    }\n  }\n\n}\n"],"names":["linkify.find","linkify.test","Injectable","Pipe","InjectionToken","NgModule","CommonModule","Inject"],"mappings":";;;;;;;;;;;;;;AAAA;QAQE;SACC;;;;;;;;;;;;;;QAQD,qCAAO;;;;;;;QAAP,UAAQ,IAAY,EAAE,OAA2B;;YAE/C,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;SAC9B;;;;;;;;;;;;QAOD,kCAAI;;;;;;QAAJ,UAAK,IAAY;YACf,OAAOA,YAAY,CAAC,IAAI,CAAC,CAAC;SAC3B;;;;;;;;;;;;QAOD,kCAAI;;;;;;QAAJ,UAAK,KAAwB;YAC3B,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;gBAC7B,OAAOC,YAAY,CAAC,KAAK,CAAC,CAAC;aAC5B;YACD,OAAOA,YAAY,OAAZ,OAAO,EAAS,KAAK,EAAE;SAC/B;;oBAnCFC,eAAU;;;;QAqCX,0BAAC;KArCD;;;;;;ACNA;QAMA;SASC;;;;;;QAJC,oCAAS;;;;;QAAT,UAAU,KAAa,EAAE,OAA2B;YAClD,OAAO,KAAK,GAAG,UAAU,CAAC,KAAK,EAAE,OAAO,CAAC,GAAG,KAAK,CAAC;SACnD;;oBAPFC,SAAI,SAAC;wBACJ,IAAI,EAAE,SAAS;qBAChB;;QAOD,uBAAC;KATD;;;;;;;;QCLE,KAAM,KAAK;QACX,SAAU,SAAS;QACnB,SAAU,SAAS;QACnB,OAAQ,OAAO;;;;;;;ACJjB;AAqBA,QAAa,uBAAuB,GAAG,IAAIC,mBAAc,CAAqB,oBAAoB,CAAC;;AACnG,QAAa,cAAc,GAAuB,EAAC,UAAU,EAAE,IAAI,EAAE,aAAa,EAAE,IAAI,EAAC;AAEzF;QAuBE,4BACmB,MAA0B;YAA1B,WAAM,GAAN,MAAM,CAAoB;YAC3C,IAAI,MAAM,CAAC,UAAU,EAAE;gBACrB,OAAO,CAAC,OAAO,CAAC,CAAC;aAClB;YAED,IAAI,MAAM,CAAC,aAAa,EAAE;gBACxB,OAAO,CAAC,OAAO,CAAC,CAAC;aAClB;SACF;;;;;QAvBM,0BAAO;;;;QAAd,UAAe,MAA2C;YAA3C,uBAAA,EAAA,uBAA2C;YACxD,OAAO;gBACL,QAAQ,EAAE,kBAAkB;gBAC5B,SAAS,EACP;oBACE,mBAAmB;oBACnB;wBACE,OAAO,EAAE,uBAAuB;wBAChC,QAAQ,EAAE,MAAM;qBACjB;iBACF;aACJ,CAAC;SACH;;oBArBFC,aAAQ,SAAC;wBACR,OAAO,EAAE;4BACPC,mBAAY;yBACb;wBACD,OAAO,EAAE,CAAC,gBAAgB,CAAC;wBAC3B,YAAY,EAAE,CAAC,gBAAgB,CAAC;qBACjC;;;;oDAiBcC,WAAM,SAAC,uBAAuB;;QAW7C,yBAAC;KAlCD;;;;;;;;;;;;;;;;;;;;;;;;;;;"}