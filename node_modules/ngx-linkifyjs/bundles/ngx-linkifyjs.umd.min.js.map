{"version":3,"file":"ngx-linkifyjs.umd.min.js","sources":["../../tmp/module/service/ngx-linkifyjs.service.ts","../../tmp/module/pipes/ngx-linkifyjs.pipe.ts","../../tmp/module/ngx-linkifyjs.module.ts","../../tmp/module/enum/linktype.enum.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\n// @ts-ignore\nimport * as linkify from 'linkifyjs';\nimport {Link} from '../..';\nimport {NgxLinkifyOptions} from '../interfaces/ngx-linkifyjs.interface';\n\n@Injectable()\nexport class NgxLinkifyjsService {\n  constructor() {\n  }\n\n  /**\n   * Convert the passed text as a string to an appropriate url\n   *\n   * @param text - the string to convert\n   * @param options - options to pass it to the linkifyjs library\n   */\n  linkify(text: string, options?: NgxLinkifyOptions): string {\n    // @ts-ignore\n    return text.linkify(options);\n  }\n\n  /**\n   * Find any links in a given text as a string\n   *\n   * @param text - the string to find some links\n   */\n  find(text: string): Array<Link> {\n    return linkify.find(text);\n  }\n\n  /**\n   * Test if a given value or array of values are links\n   *\n   * @param value - the value to test\n   */\n  test(value: string | string[]): boolean {\n    if (typeof value === 'string') {\n      return linkify.test(value);\n    }\n    return linkify.test(...value);\n  }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n// @ts-ignore\nimport linkifyStr from 'linkifyjs/string';\nimport {NgxLinkifyOptions} from '../..';\n\n@Pipe({\n  name: 'linkify'\n})\nexport class NgxLinkifyjsPipe implements PipeTransform {\n\n  transform(value: string, options?: NgxLinkifyOptions): string {\n    return value ? linkifyStr(value, options) : value;\n  }\n\n}\n","import {CommonModule} from '@angular/common';\nimport {Inject, InjectionToken, ModuleWithProviders, NgModule} from '@angular/core';\n// @ts-ignore\nimport * as linkify from 'linkifyjs';\n// @ts-ignore\nimport hashtag from 'linkifyjs/plugins/hashtag';\n// @ts-ignore\nimport mention from 'linkifyjs/plugins/mention';\n\nimport {NgxLinkifyjsService} from './service/ngx-linkifyjs.service';\nimport {NgxLinkifyjsPipe} from './pipes/ngx-linkifyjs.pipe';\n\n// Export module's public API\nexport {Link} from './interfaces/ngx-linkifyjs.interface';\nimport {NgxLinkifyjsConfig} from './interfaces/ngx-linkifyjs.interface';\n\nexport {LinkType} from './enum/linktype.enum';\nexport {NgxLinkifyOptions} from './interfaces/ngx-linkifyjs.interface';\nexport {NgxLinkifyjsPipe} from './pipes/ngx-linkifyjs.pipe';\nexport {NgxLinkifyjsService} from './service/ngx-linkifyjs.service';\n\nexport const NgxLinkifyjsConfigToken = new InjectionToken<NgxLinkifyjsConfig>('NgxLinkifyjsConfig');\nexport const DEFAULT_CONFIG: NgxLinkifyjsConfig = {enableHash: true, enableMention: true};\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  exports: [NgxLinkifyjsPipe],\n  declarations: [NgxLinkifyjsPipe]\n})\nexport class NgxLinkifyjsModule {\n\n  static forRoot(config: NgxLinkifyjsConfig = DEFAULT_CONFIG): ModuleWithProviders {\n    return {\n      ngModule: NgxLinkifyjsModule,\n      providers:\n        [\n          NgxLinkifyjsService,\n          {\n            provide: NgxLinkifyjsConfigToken,\n            useValue: config\n          },\n        ]\n    };\n  }\n\n  constructor(@Inject(NgxLinkifyjsConfigToken)\n              public config: NgxLinkifyjsConfig) {\n    if (config.enableHash) {\n      hashtag(linkify);\n    }\n\n    if (config.enableMention) {\n      mention(linkify);\n    }\n  }\n\n}\n","export enum LinkType {\n  URL = 'url',\n  HASHTAG = 'hashtag',\n  MENTION = 'mention',\n  EMAIL = 'email',\n}\n"],"names":["NgxLinkifyjsService","text","options","linkify","linkify.find","value","linkify.test","Injectable","NgxLinkifyjsPipe","linkifyStr","Pipe","name","NgxLinkifyjsConfigToken","InjectionToken","DEFAULT_CONFIG","enableHash","enableMention","config","this","hashtag","mention","NgxLinkifyjsModule","ngModule","providers","provide","useValue","NgModule","imports","CommonModule","exports","declarations","Inject","URL","HASHTAG","MENTION","EMAIL"],"mappings":"6tBAQE,cAmCF,OA1BEA,oBAAA,SAAQC,EAAcC,GAEpB,OAAOD,EAAKE,QAAQD,IAQtBF,iBAAA,SAAKC,GACH,OAAOG,OAAaH,IAQtBD,iBAAA,SAAKK,GACH,MAAqB,iBAAVA,EACFC,OAAaD,GAEfC,aAAAH,EAAgBE,wBAlC1BE,uECAD,cASA,OAJEC,sBAAA,SAAUH,EAAeH,GACvB,OAAOG,EAAQI,EAAWJ,EAAOH,GAAWG,uBAN/CK,cACCC,KAAM,mBCcKC,EAA0B,IAAIC,iBAAmC,sBACjEC,GAAsCC,YAAY,EAAMC,eAAe,gBAyBlF,WACmBC,GAAAC,YAAAD,EACbA,EAAOF,YACTI,EAAQhB,GAGNc,EAAOD,eACTI,EAAQjB,GAId,OAzBSkB,UAAP,SAAeJ,GACb,oBADaA,MAEXK,SAAUD,EACVE,WAEIvB,GAEEwB,QAASZ,EACTa,SAAUR,0BAjBrBS,kBACCC,SACEC,gBAEFC,SAAUrB,GACVsB,cAAetB,yEAkBFuB,eAAOnB,yBC9CpBoB,IAAM,MACNC,QAAU,UACVC,QAAU,UACVC,MAAQ"}