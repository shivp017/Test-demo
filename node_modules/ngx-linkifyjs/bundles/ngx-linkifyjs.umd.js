(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('linkifyjs'), require('linkifyjs/plugins/hashtag'), require('linkifyjs/plugins/mention'), require('linkifyjs/string')) :
    typeof define === 'function' && define.amd ? define(['exports', '@angular/common', '@angular/core', 'linkifyjs', 'linkifyjs/plugins/hashtag', 'linkifyjs/plugins/mention', 'linkifyjs/string'], factory) :
    (global = global || self, factory(global.ngxLinkifyjs = {}, global.ng.common, global.ng.core, global.linkifyjs, global.hashtag, global.mention, global.linkifyjsString));
}(this, function (exports, common, core, linkify, hashtag, mention, linkifyStr) { 'use strict';

    hashtag = hashtag && hashtag.hasOwnProperty('default') ? hashtag['default'] : hashtag;
    mention = mention && mention.hasOwnProperty('default') ? mention['default'] : mention;
    linkifyStr = linkifyStr && linkifyStr.hasOwnProperty('default') ? linkifyStr['default'] : linkifyStr;

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxLinkifyjsService = /** @class */ (function () {
        function NgxLinkifyjsService() {
        }
        /**
         * Convert the passed text as a string to an appropriate url
         *
         * @param text - the string to convert
         * @param options - options to pass it to the linkifyjs library
         */
        /**
         * Convert the passed text as a string to an appropriate url
         *
         * @param {?} text - the string to convert
         * @param {?=} options - options to pass it to the linkifyjs library
         * @return {?}
         */
        NgxLinkifyjsService.prototype.linkify = /**
         * Convert the passed text as a string to an appropriate url
         *
         * @param {?} text - the string to convert
         * @param {?=} options - options to pass it to the linkifyjs library
         * @return {?}
         */
        function (text, options) {
            // @ts-ignore
            return text.linkify(options);
        };
        /**
         * Find any links in a given text as a string
         *
         * @param text - the string to find some links
         */
        /**
         * Find any links in a given text as a string
         *
         * @param {?} text - the string to find some links
         * @return {?}
         */
        NgxLinkifyjsService.prototype.find = /**
         * Find any links in a given text as a string
         *
         * @param {?} text - the string to find some links
         * @return {?}
         */
        function (text) {
            return linkify.find(text);
        };
        /**
         * Test if a given value or array of values are links
         *
         * @param value - the value to test
         */
        /**
         * Test if a given value or array of values are links
         *
         * @param {?} value - the value to test
         * @return {?}
         */
        NgxLinkifyjsService.prototype.test = /**
         * Test if a given value or array of values are links
         *
         * @param {?} value - the value to test
         * @return {?}
         */
        function (value) {
            if (typeof value === 'string') {
                return linkify.test(value);
            }
            return linkify.test.apply(linkify, value);
        };
        NgxLinkifyjsService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        NgxLinkifyjsService.ctorParameters = function () { return []; };
        return NgxLinkifyjsService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxLinkifyjsPipe = /** @class */ (function () {
        function NgxLinkifyjsPipe() {
        }
        /**
         * @param {?} value
         * @param {?=} options
         * @return {?}
         */
        NgxLinkifyjsPipe.prototype.transform = /**
         * @param {?} value
         * @param {?=} options
         * @return {?}
         */
        function (value, options) {
            return value ? linkifyStr(value, options) : value;
        };
        NgxLinkifyjsPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'linkify'
                    },] },
        ];
        return NgxLinkifyjsPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var LinkType = {
        URL: 'url',
        HASHTAG: 'hashtag',
        MENTION: 'mention',
        EMAIL: 'email',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var NgxLinkifyjsConfigToken = new core.InjectionToken('NgxLinkifyjsConfig');
    /** @type {?} */
    var DEFAULT_CONFIG = { enableHash: true, enableMention: true };
    var NgxLinkifyjsModule = /** @class */ (function () {
        function NgxLinkifyjsModule(config) {
            this.config = config;
            if (config.enableHash) {
                hashtag(linkify);
            }
            if (config.enableMention) {
                mention(linkify);
            }
        }
        /**
         * @param {?=} config
         * @return {?}
         */
        NgxLinkifyjsModule.forRoot = /**
         * @param {?=} config
         * @return {?}
         */
        function (config) {
            if (config === void 0) { config = DEFAULT_CONFIG; }
            return {
                ngModule: NgxLinkifyjsModule,
                providers: [
                    NgxLinkifyjsService,
                    {
                        provide: NgxLinkifyjsConfigToken,
                        useValue: config
                    },
                ]
            };
        };
        NgxLinkifyjsModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        exports: [NgxLinkifyjsPipe],
                        declarations: [NgxLinkifyjsPipe]
                    },] },
        ];
        /** @nocollapse */
        NgxLinkifyjsModule.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Inject, args: [NgxLinkifyjsConfigToken,] }] }
        ]; };
        return NgxLinkifyjsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.LinkType = LinkType;
    exports.NgxLinkifyjsPipe = NgxLinkifyjsPipe;
    exports.NgxLinkifyjsService = NgxLinkifyjsService;
    exports.NgxLinkifyjsConfigToken = NgxLinkifyjsConfigToken;
    exports.DEFAULT_CONFIG = DEFAULT_CONFIG;
    exports.NgxLinkifyjsModule = NgxLinkifyjsModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ngx-linkifyjs.umd.js.map
