{"version":3,"file":"ngx-linkifyjs.js","sources":["../../tmp/module/service/ngx-linkifyjs.service.ts","../../tmp/module/pipes/ngx-linkifyjs.pipe.ts","../../tmp/module/enum/linktype.enum.ts","../../tmp/module/ngx-linkifyjs.module.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\n// @ts-ignore\nimport * as linkify from 'linkifyjs';\nimport {Link} from '../..';\nimport {NgxLinkifyOptions} from '../interfaces/ngx-linkifyjs.interface';\n\n@Injectable()\nexport class NgxLinkifyjsService {\n  constructor() {\n  }\n\n  /**\n   * Convert the passed text as a string to an appropriate url\n   *\n   * @param text - the string to convert\n   * @param options - options to pass it to the linkifyjs library\n   */\n  linkify(text: string, options?: NgxLinkifyOptions): string {\n    // @ts-ignore\n    return text.linkify(options);\n  }\n\n  /**\n   * Find any links in a given text as a string\n   *\n   * @param text - the string to find some links\n   */\n  find(text: string): Array<Link> {\n    return linkify.find(text);\n  }\n\n  /**\n   * Test if a given value or array of values are links\n   *\n   * @param value - the value to test\n   */\n  test(value: string | string[]): boolean {\n    if (typeof value === 'string') {\n      return linkify.test(value);\n    }\n    return linkify.test(...value);\n  }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n// @ts-ignore\nimport linkifyStr from 'linkifyjs/string';\nimport {NgxLinkifyOptions} from '../..';\n\n@Pipe({\n  name: 'linkify'\n})\nexport class NgxLinkifyjsPipe implements PipeTransform {\n\n  transform(value: string, options?: NgxLinkifyOptions): string {\n    return value ? linkifyStr(value, options) : value;\n  }\n\n}\n","export enum LinkType {\n  URL = 'url',\n  HASHTAG = 'hashtag',\n  MENTION = 'mention',\n  EMAIL = 'email',\n}\n","import {CommonModule} from '@angular/common';\nimport {Inject, InjectionToken, ModuleWithProviders, NgModule} from '@angular/core';\n// @ts-ignore\nimport * as linkify from 'linkifyjs';\n// @ts-ignore\nimport hashtag from 'linkifyjs/plugins/hashtag';\n// @ts-ignore\nimport mention from 'linkifyjs/plugins/mention';\n\nimport {NgxLinkifyjsService} from './service/ngx-linkifyjs.service';\nimport {NgxLinkifyjsPipe} from './pipes/ngx-linkifyjs.pipe';\n\n// Export module's public API\nexport {Link} from './interfaces/ngx-linkifyjs.interface';\nimport {NgxLinkifyjsConfig} from './interfaces/ngx-linkifyjs.interface';\n\nexport {LinkType} from './enum/linktype.enum';\nexport {NgxLinkifyOptions} from './interfaces/ngx-linkifyjs.interface';\nexport {NgxLinkifyjsPipe} from './pipes/ngx-linkifyjs.pipe';\nexport {NgxLinkifyjsService} from './service/ngx-linkifyjs.service';\n\nexport const NgxLinkifyjsConfigToken = new InjectionToken<NgxLinkifyjsConfig>('NgxLinkifyjsConfig');\nexport const DEFAULT_CONFIG: NgxLinkifyjsConfig = {enableHash: true, enableMention: true};\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  exports: [NgxLinkifyjsPipe],\n  declarations: [NgxLinkifyjsPipe]\n})\nexport class NgxLinkifyjsModule {\n\n  static forRoot(config: NgxLinkifyjsConfig = DEFAULT_CONFIG): ModuleWithProviders {\n    return {\n      ngModule: NgxLinkifyjsModule,\n      providers:\n        [\n          NgxLinkifyjsService,\n          {\n            provide: NgxLinkifyjsConfigToken,\n            useValue: config\n          },\n        ]\n    };\n  }\n\n  constructor(@Inject(NgxLinkifyjsConfigToken)\n              public config: NgxLinkifyjsConfig) {\n    if (config.enableHash) {\n      hashtag(linkify);\n    }\n\n    if (config.enableMention) {\n      mention(linkify);\n    }\n  }\n\n}\n"],"names":["linkify.find","linkify.test"],"mappings":";;;;;;;;;;;;AAAA,MAOa,mBAAmB;IAC9B;KACC;;;;;;;;IAQD,OAAO,CAAC,IAAY,EAAE,OAA2B;;QAE/C,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;KAC9B;;;;;;;IAOD,IAAI,CAAC,IAAY;QACf,OAAOA,IAAY,CAAC,IAAI,CAAC,CAAC;KAC3B;;;;;;;IAOD,IAAI,CAAC,KAAwB;QAC3B,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC7B,OAAOC,IAAY,CAAC,KAAK,CAAC,CAAC;SAC5B;QACD,OAAOA,IAAY,CAAC,GAAG,KAAK,CAAC,CAAC;KAC/B;;;YAnCF,UAAU;;;;;;;;;ACNX,MASa,gBAAgB;;;;;;IAE3B,SAAS,CAAC,KAAa,EAAE,OAA2B;QAClD,OAAO,KAAK,GAAG,UAAU,CAAC,KAAK,EAAE,OAAO,CAAC,GAAG,KAAK,CAAC;KACnD;;;YAPF,IAAI,SAAC;gBACJ,IAAI,EAAE,SAAS;aAChB;;;;;;;;;ICPC,KAAM,KAAK;IACX,SAAU,SAAS;IACnB,SAAU,SAAS;IACnB,OAAQ,OAAO;;;;;;;ACJjB;AAqBA,MAAa,uBAAuB,GAAG,IAAI,cAAc,CAAqB,oBAAoB,CAAC;;AACnG,MAAa,cAAc,GAAuB,EAAC,UAAU,EAAE,IAAI,EAAE,aAAa,EAAE,IAAI,EAAC;AASzF,MAAa,kBAAkB;;;;IAgB7B,YACmB,MAA0B;QAA1B,WAAM,GAAN,MAAM,CAAoB;QAC3C,IAAI,MAAM,CAAC,UAAU,EAAE;YACrB,OAAO,CAAC,OAAO,CAAC,CAAC;SAClB;QAED,IAAI,MAAM,CAAC,aAAa,EAAE;YACxB,OAAO,CAAC,OAAO,CAAC,CAAC;SAClB;KACF;;;;;IAvBD,OAAO,OAAO,CAAC,SAA6B,cAAc;QACxD,OAAO;YACL,QAAQ,EAAE,kBAAkB;YAC5B,SAAS,EACP;gBACE,mBAAmB;gBACnB;oBACE,OAAO,EAAE,uBAAuB;oBAChC,QAAQ,EAAE,MAAM;iBACjB;aACF;SACJ,CAAC;KACH;;;YArBF,QAAQ,SAAC;gBACR,OAAO,EAAE;oBACP,YAAY;iBACb;gBACD,OAAO,EAAE,CAAC,gBAAgB,CAAC;gBAC3B,YAAY,EAAE,CAAC,gBAAgB,CAAC;aACjC;;;;4CAiBc,MAAM,SAAC,uBAAuB;;;;;;;;;;;;;;;"}