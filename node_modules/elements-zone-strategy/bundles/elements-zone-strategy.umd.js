(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/elements'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('elements-zone-strategy', ['exports', '@angular/elements', '@angular/core'], factory) :
    (global = global || self, factory(global['elements-zone-strategy'] = {}, global.ng.elements, global.ng.core));
}(this, function (exports, elements, core) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ElementZoneStrategy = /** @class */ (function () {
        function ElementZoneStrategy(strategy, injector) {
            this.strategy = strategy;
            this.injector = injector;
            this.ngZone = this.injector.get(core.NgZone);
        }
        /**
         * @param {?} element
         * @return {?}
         */
        ElementZoneStrategy.prototype.connect = /**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            var _this = this;
            this.runInZone(function () { _this.strategy.connect(element); });
            this.events = this.strategy.events;
        };
        /**
         * @return {?}
         */
        ElementZoneStrategy.prototype.disconnect = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.runInZone(function () { _this.strategy.disconnect(); });
        };
        /**
         * @param {?} propName
         * @return {?}
         */
        ElementZoneStrategy.prototype.getInputValue = /**
         * @param {?} propName
         * @return {?}
         */
        function (propName) {
            var _this = this;
            // tslint:disable-next-line:arrow-return-shorthand
            return this.runInZone(function () { return _this.strategy.getInputValue(propName); });
        };
        /**
         * @param {?} propName
         * @param {?} value
         * @return {?}
         */
        ElementZoneStrategy.prototype.setInputValue = /**
         * @param {?} propName
         * @param {?} value
         * @return {?}
         */
        function (propName, value) {
            var _this = this;
            this.runInZone(function () { _this.strategy.setInputValue(propName, value); });
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        ElementZoneStrategy.prototype.runInZone = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) { return this.ngZone.run(fn); };
        return ElementZoneStrategy;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ElementZoneStrategyFactory = /** @class */ (function () {
        function ElementZoneStrategyFactory(component, injector) {
            this.component = component;
            this.injector = injector;
            this.ngElement = elements.createCustomElement(this.component, { injector: this.injector });
            // this is to keep the document-register-element polyfill happy
            // it doesn't like creating elements before the define, so we fill the registry with a random definition
            customElements.define(this.generateName(), this.ngElement);
        }
        /**
         * @return {?}
         */
        ElementZoneStrategyFactory.prototype.string4 = /**
         * @return {?}
         */
        function () {
            return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
        };
        /**
         * @return {?}
         */
        ElementZoneStrategyFactory.prototype.generateName = /**
         * @return {?}
         */
        function () {
            var /** @type {?} */ result = 'dummy-name-n';
            var /** @type {?} */ temp = ElementZoneStrategyFactory.counter + '';
            result = result + temp + '-' + this.string4() + this.string4() + this.string4() + '-' +
                this.string4() + this.string4() + '-' + this.string4();
            ElementZoneStrategyFactory.counter++;
            return result;
        };
        /**
         * @param {?} injector
         * @return {?}
         */
        ElementZoneStrategyFactory.prototype.create = /**
         * @param {?} injector
         * @return {?}
         */
        function (injector) {
            // the only way to get a default strategy outside @angular/elements
            // is to create the ngElement/ngElementImpl and get it from a property
            var /** @type {?} */ tempElement = new this.ngElement(this.injector);
            var /** @type {?} */ strategy = tempElement['ngElementStrategy'];
            tempElement = null;
            return new ElementZoneStrategy(strategy, this.injector);
        };
        ElementZoneStrategyFactory.counter = 1;
        return ElementZoneStrategyFactory;
    }());

    exports.ElementZoneStrategyFactory = ElementZoneStrategyFactory;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=elements-zone-strategy.umd.js.map
