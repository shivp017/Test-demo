/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { createCustomElement } from '@angular/elements';
import { ElementZoneStrategy } from './element-zone-strategy';
export class ElementZoneStrategyFactory {
    /**
     * @param {?} component
     * @param {?} injector
     */
    constructor(component, injector) {
        this.component = component;
        this.injector = injector;
        this.ngElement = createCustomElement(this.component, { injector: this.injector });
        // this is to keep the document-register-element polyfill happy
        // it doesn't like creating elements before the define, so we fill the registry with a random definition
        customElements.define(this.generateName(), this.ngElement);
    }
    /**
     * @return {?}
     */
    string4() {
        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
    }
    /**
     * @return {?}
     */
    generateName() {
        let /** @type {?} */ result = 'dummy-name-n';
        const /** @type {?} */ temp = ElementZoneStrategyFactory.counter + '';
        result = result + temp + '-' + this.string4() + this.string4() + this.string4() + '-' +
            this.string4() + this.string4() + '-' + this.string4();
        ElementZoneStrategyFactory.counter++;
        return result;
    }
    /**
     * @param {?} injector
     * @return {?}
     */
    create(injector) {
        // the only way to get a default strategy outside @angular/elements
        // is to create the ngElement/ngElementImpl and get it from a property
        let /** @type {?} */ tempElement = new this.ngElement(this.injector);
        const /** @type {?} */ strategy = tempElement['ngElementStrategy'];
        tempElement = null;
        return new ElementZoneStrategy(strategy, this.injector);
    }
}
ElementZoneStrategyFactory.counter = 1;
function ElementZoneStrategyFactory_tsickle_Closure_declarations() {
    /** @type {?} */
    ElementZoneStrategyFactory.counter;
    /** @type {?} */
    ElementZoneStrategyFactory.prototype.ngElement;
    /** @type {?} */
    ElementZoneStrategyFactory.prototype.component;
    /** @type {?} */
    ElementZoneStrategyFactory.prototype.injector;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxlbWVudC16b25lLXN0cmF0ZWd5LWZhY3RvcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9lbGVtZW50cy16b25lLXN0cmF0ZWd5LyIsInNvdXJjZXMiOlsibGliL2VsZW1lbnQtem9uZS1zdHJhdGVneS1mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsbUJBQW1CLEVBQStDLE1BQU0sbUJBQW1CLENBQUM7QUFDckcsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFOUQsTUFBTTs7Ozs7SUFvQkosWUFBb0IsU0FBb0IsRUFBVSxRQUFrQjtRQUFoRCxjQUFTLEdBQVQsU0FBUyxDQUFXO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNsRSxJQUFJLENBQUMsU0FBUyxHQUFHLG1CQUFtQixDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7OztRQUdsRixjQUFjLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7S0FDNUQ7Ozs7SUFyQlMsT0FBTztRQUNmLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDNUU7Ozs7SUFFUyxZQUFZO1FBQ3BCLHFCQUFJLE1BQU0sR0FBRyxjQUFjLENBQUM7UUFFNUIsdUJBQU0sSUFBSSxHQUFHLDBCQUEwQixDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFFckQsTUFBTSxHQUFHLE1BQU0sR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLEdBQUc7WUFDbkYsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBRXpELDBCQUEwQixDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3JDLE1BQU0sQ0FBQyxNQUFNLENBQUM7S0FDZjs7Ozs7SUFTRCxNQUFNLENBQUMsUUFBa0I7OztRQUd2QixxQkFBSSxXQUFXLEdBQUcsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNwRCx1QkFBTSxRQUFRLEdBQUcsV0FBVyxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDbEQsV0FBVyxHQUFHLElBQUksQ0FBQztRQUVuQixNQUFNLENBQUMsSUFBSSxtQkFBbUIsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ3pEOztxQ0FsQ2dCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RvciwgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgY3JlYXRlQ3VzdG9tRWxlbWVudCwgTmdFbGVtZW50U3RyYXRlZ3ksIE5nRWxlbWVudFN0cmF0ZWd5RmFjdG9yeSB9IGZyb20gJ0Bhbmd1bGFyL2VsZW1lbnRzJztcbmltcG9ydCB7IEVsZW1lbnRab25lU3RyYXRlZ3kgfSBmcm9tICcuL2VsZW1lbnQtem9uZS1zdHJhdGVneSc7XG5cbmV4cG9ydCBjbGFzcyBFbGVtZW50Wm9uZVN0cmF0ZWd5RmFjdG9yeSBpbXBsZW1lbnRzIE5nRWxlbWVudFN0cmF0ZWd5RmFjdG9yeSB7XG4gIHN0YXRpYyBjb3VudGVyID0gMTtcbiAgcHJpdmF0ZSBuZ0VsZW1lbnQ7XG5cbiAgcHJvdGVjdGVkIHN0cmluZzQoKSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoKDEgKyBNYXRoLnJhbmRvbSgpKSAqIDB4MTAwMDApLnRvU3RyaW5nKDE2KS5zdWJzdHJpbmcoMSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2VuZXJhdGVOYW1lKCkge1xuICAgIGxldCByZXN1bHQgPSAnZHVtbXktbmFtZS1uJztcblxuICAgIGNvbnN0IHRlbXAgPSBFbGVtZW50Wm9uZVN0cmF0ZWd5RmFjdG9yeS5jb3VudGVyICsgJyc7XG5cbiAgICByZXN1bHQgPSByZXN1bHQgKyB0ZW1wICsgJy0nICsgdGhpcy5zdHJpbmc0KCkgKyB0aGlzLnN0cmluZzQoKSArIHRoaXMuc3RyaW5nNCgpICsgJy0nICtcbiAgICAgIHRoaXMuc3RyaW5nNCgpICsgdGhpcy5zdHJpbmc0KCkgKyAnLScgKyB0aGlzLnN0cmluZzQoKTtcblxuICAgIEVsZW1lbnRab25lU3RyYXRlZ3lGYWN0b3J5LmNvdW50ZXIrKztcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjb21wb25lbnQ6IFR5cGU8YW55PiwgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IpIHtcbiAgICB0aGlzLm5nRWxlbWVudCA9IGNyZWF0ZUN1c3RvbUVsZW1lbnQodGhpcy5jb21wb25lbnQsIHsgaW5qZWN0b3I6IHRoaXMuaW5qZWN0b3IgfSk7XG4gICAgLy8gdGhpcyBpcyB0byBrZWVwIHRoZSBkb2N1bWVudC1yZWdpc3Rlci1lbGVtZW50IHBvbHlmaWxsIGhhcHB5XG4gICAgLy8gaXQgZG9lc24ndCBsaWtlIGNyZWF0aW5nIGVsZW1lbnRzIGJlZm9yZSB0aGUgZGVmaW5lLCBzbyB3ZSBmaWxsIHRoZSByZWdpc3RyeSB3aXRoIGEgcmFuZG9tIGRlZmluaXRpb25cbiAgICBjdXN0b21FbGVtZW50cy5kZWZpbmUodGhpcy5nZW5lcmF0ZU5hbWUoKSwgdGhpcy5uZ0VsZW1lbnQpO1xuICB9XG5cbiAgY3JlYXRlKGluamVjdG9yOiBJbmplY3Rvcik6IE5nRWxlbWVudFN0cmF0ZWd5IHtcbiAgICAvLyB0aGUgb25seSB3YXkgdG8gZ2V0IGEgZGVmYXVsdCBzdHJhdGVneSBvdXRzaWRlIEBhbmd1bGFyL2VsZW1lbnRzXG4gICAgLy8gaXMgdG8gY3JlYXRlIHRoZSBuZ0VsZW1lbnQvbmdFbGVtZW50SW1wbCBhbmQgZ2V0IGl0IGZyb20gYSBwcm9wZXJ0eVxuICAgIGxldCB0ZW1wRWxlbWVudCA9IG5ldyB0aGlzLm5nRWxlbWVudCh0aGlzLmluamVjdG9yKTtcbiAgICBjb25zdCBzdHJhdGVneSA9IHRlbXBFbGVtZW50WyduZ0VsZW1lbnRTdHJhdGVneSddO1xuICAgIHRlbXBFbGVtZW50ID0gbnVsbDtcblxuICAgIHJldHVybiBuZXcgRWxlbWVudFpvbmVTdHJhdGVneShzdHJhdGVneSwgdGhpcy5pbmplY3Rvcik7XG4gIH1cbn1cbiJdfQ==