import { createCustomElement } from '@angular/elements';
import { NgZone } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ElementZoneStrategy {
    /**
     * @param {?} strategy
     * @param {?} injector
     */
    constructor(strategy, injector) {
        this.strategy = strategy;
        this.injector = injector;
        this.ngZone = this.injector.get(NgZone);
    }
    /**
     * @param {?} element
     * @return {?}
     */
    connect(element) {
        this.runInZone(() => { this.strategy.connect(element); });
        this.events = this.strategy.events;
    }
    /**
     * @return {?}
     */
    disconnect() {
        this.runInZone(() => { this.strategy.disconnect(); });
    }
    /**
     * @param {?} propName
     * @return {?}
     */
    getInputValue(propName) {
        // tslint:disable-next-line:arrow-return-shorthand
        return this.runInZone(() => { return this.strategy.getInputValue(propName); });
    }
    /**
     * @param {?} propName
     * @param {?} value
     * @return {?}
     */
    setInputValue(propName, value) {
        this.runInZone(() => { this.strategy.setInputValue(propName, value); });
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    runInZone(fn) { return this.ngZone.run(fn); }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ElementZoneStrategyFactory {
    /**
     * @param {?} component
     * @param {?} injector
     */
    constructor(component, injector) {
        this.component = component;
        this.injector = injector;
        this.ngElement = createCustomElement(this.component, { injector: this.injector });
        // this is to keep the document-register-element polyfill happy
        // it doesn't like creating elements before the define, so we fill the registry with a random definition
        customElements.define(this.generateName(), this.ngElement);
    }
    /**
     * @return {?}
     */
    string4() {
        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
    }
    /**
     * @return {?}
     */
    generateName() {
        let /** @type {?} */ result = 'dummy-name-n';
        const /** @type {?} */ temp = ElementZoneStrategyFactory.counter + '';
        result = result + temp + '-' + this.string4() + this.string4() + this.string4() + '-' +
            this.string4() + this.string4() + '-' + this.string4();
        ElementZoneStrategyFactory.counter++;
        return result;
    }
    /**
     * @param {?} injector
     * @return {?}
     */
    create(injector) {
        // the only way to get a default strategy outside @angular/elements
        // is to create the ngElement/ngElementImpl and get it from a property
        let /** @type {?} */ tempElement = new this.ngElement(this.injector);
        const /** @type {?} */ strategy = tempElement['ngElementStrategy'];
        tempElement = null;
        return new ElementZoneStrategy(strategy, this.injector);
    }
}
ElementZoneStrategyFactory.counter = 1;

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { ElementZoneStrategyFactory };
//# sourceMappingURL=elements-zone-strategy.js.map
